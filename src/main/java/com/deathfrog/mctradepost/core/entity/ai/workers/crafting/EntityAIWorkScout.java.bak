package com.deathfrog.mctradepost.core.entity.ai.workers.crafting;

import org.jetbrains.annotations.NotNull;

import com.deathfrog.mctradepost.MCTradePostMod;
import com.deathfrog.mctradepost.core.colony.buildings.workerbuildings.BuildingOutpost;
import com.deathfrog.mctradepost.core.colony.jobs.JobScout;
import com.minecolonies.api.colony.interactionhandling.ChatPriority;
import com.minecolonies.api.colony.workorders.IServerWorkOrder;
import com.minecolonies.api.entity.ai.statemachine.AITarget;
import com.minecolonies.api.entity.ai.statemachine.states.IAIState;
import com.minecolonies.api.entity.citizen.VisibleCitizenStatus;
import com.minecolonies.api.util.constant.ColonyConstants;
import com.minecolonies.core.colony.interactionhandling.StandardInteraction;
import com.minecolonies.core.entity.ai.workers.AbstractEntityAIInteract;
import com.minecolonies.core.entity.ai.workers.builder.EntityAIStructureBuilder;
import com.minecolonies.core.entity.ai.workers.production.agriculture.EntityAIWorkFarmer;

import net.minecraft.network.chat.Component;
import net.minecraft.resources.ResourceLocation;

import static com.minecolonies.api.entity.ai.statemachine.states.AIWorkerState.*;
import static com.deathfrog.mctradepost.apiimp.initializer.MCTPInteractionInitializer.DISCONNECTED_OUTPOST;
import java.util.Map;

public class EntityAIWorkScout extends AbstractEntityAIInteract<JobScout, BuildingOutpost>
{
    /**
     * Work status icons
     */
    private final static VisibleCitizenStatus OUTPOST_FARMING =
        new VisibleCitizenStatus(ResourceLocation.fromNamespaceAndPath(MCTradePostMod.MODID, "textures/icons/work/outpost_farming.png"),
            "com.mctradepost.outpost.mode.farming");

    private final static VisibleCitizenStatus OUTPOST_BUILDING =
        new VisibleCitizenStatus(ResourceLocation.fromNamespaceAndPath(MCTradePostMod.MODID, "textures/icons/work/outpost_building.png"),
            "com.mctradepost.outpost.mode.building");

    private final static VisibleCitizenStatus OUTPOST_SCOUTING =
        new VisibleCitizenStatus(ResourceLocation.fromNamespaceAndPath(MCTradePostMod.MODID, "textures/icons/work/outpost_scouting.png"),
            "com.mctradepost.outpost.mode.scouting");

    private final static VisibleCitizenStatus OUTPOST_NONE =
        new VisibleCitizenStatus(ResourceLocation.fromNamespaceAndPath(MCTradePostMod.MODID, "textures/icons/work/outpost_none.png"),
            "com.mctradepost.outpost.mode.none");

    // private EntityAIWorkFarmer farmer = null;
    // private EntityAIStructureBuilder builder = null;

    private static final double FARMING_CHANCE = 0.25;

    @SuppressWarnings("unchecked")
    public EntityAIWorkScout(@NotNull final JobScout job)
    {
        super(job);

        super.registerTargets(
            new AITarget<IAIState>(IDLE, START_WORKING, 1),
            new AITarget<IAIState>(DECIDE, this::decide, 10)
        );
        worker.setCanPickUpLoot(true);
    }

    @Override
    public Class<BuildingOutpost> getExpectedBuildingClass()
    {
        return BuildingOutpost.class;
    }

    public IAIState decide()
    {
        /*
        if (building.isDisconnected())
        {
            job.setRole(ScoutRoles.NONE);

            worker.getCitizenData().triggerInteraction(
                new StandardInteraction(Component.translatable(DISCONNECTED_OUTPOST, building.getBuildingDisplayName()),
                    Component.translatable(DISCONNECTED_OUTPOST),
                    ChatPriority.BLOCKING));

        }

        if (job.getRole() == ScoutRoles.FARMER)
        {
            if (farmer.getState() == IDLE)
            {
                switchRoles(ScoutRoles.NONE);
            }
        }

        if (job.getRole() == ScoutRoles.NONE || job.getRole() == ScoutRoles.SCOUT)
        {
            Map<Integer, IServerWorkOrder> workOrders = building.getColony().getWorkManager().getWorkOrders();
            for (IServerWorkOrder workOrder : workOrders.values())
            {
                if (workOrder.getClaimedBy().equals(building.getPosition()))
                {
                    switchRoles(ScoutRoles.BUILDER);
                    break;
                }
            }

            if (ColonyConstants.rand.nextDouble() < FARMING_CHANCE)
            {
                switchRoles(ScoutRoles.FARMER);
            }
            else
            {
                switchRoles(ScoutRoles.SCOUT);
            }
        }

        if (job.getRole() == ScoutRoles.SCOUT)
        {
            // TODO: Ship stacks
            // TODO: Request food
            // TODO: Complain if the station becomes disconnected.
        }
        */

        return DECIDE;
    }

    /*
    protected void switchRoles(ScoutRoles newRole)
    {
        return;
        
        ScoutRoles oldRole = job.getRole();

        if (oldRole != newRole)
        {
            farmer = null;
            builder = null;
        }

        switch (newRole)
        {
            case FARMER:
                farmer = new EntityAIWorkFarmer(job.getFarmer());
                worker.getCitizenData().setVisibleStatus(OUTPOST_FARMING);
                break;

            case BUILDER:
                builder = new EntityAIStructureBuilder(job.getBuilder());
                worker.getCitizenData().setVisibleStatus(OUTPOST_BUILDING);
                break;

            case SCOUT:
                worker.getCitizenData().setVisibleStatus(OUTPOST_SCOUTING);
                break;

            case NONE:
                worker.getCitizenData().setVisibleStatus(OUTPOST_NONE);
                break;
        }

    }
    */

    @Override
    public void tick()
    {
        /*
        switch (job.getRole())
        {
            case FARMER:
                // farmer.tick();
                break;

            case BUILDER:
                // builder.tick();
                break;

            case SCOUT:
                break;

            case NONE:
                break;
        }
        */

        super.tick();
    }
}
